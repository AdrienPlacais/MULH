##/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 15 11:03:24 2017

@author: AP252436
"""

import numpy as np
import os as os
#import shutil
import subprocess as sub
import time
import shutil

#==============================================================================
# Messages colors
#==============================================================================
def printc(message, color='red'):
    if color in ('red','r'):
        escape_code = '\x1b[31m'
    if color in ('blue', 'b'):
        escape_code = '\x1b[34m'
    if color in ('green', 'g'):
        escape_code = '\x1b[32m'
    if color in ('magenta', 'm'):
        escape_code = '\x1b[35m'
    if color in ('cyan', 'c'):
        escape_code = '\x1b[36m'
    normal_code = '\x1b[0m'
    print(escape_code+message+normal_code)


#==============================================================================
# Class MULHcl
#==============================================================================
class MULHcl:
    """
    MULH simulation object.
    
    IMPORTANT :
        A config.mulh file should be present in the MULH/ directory.
        It can easily be configured thanks to config_MULH.py.
    
        Results will be stored in the MULH/data/results_python folder.
        """
    MULH_PATH = '/Home/AP252436/MULH/'
    BIN_PATH = MULH_PATH + 'bin/'

    if not os.path.exists(MULH_PATH):
        raise OSError('Incorrect MULH folder absolute path')  
    if not os.path.exists(BIN_PATH):
        raise OSError('Incorrect bin relative path -- check that there is a bin directory in the MULH folder')




    def __init__(self, project_path, config_file='config.mulh', tmp_path = 'tmp/', output_path = 'results/'):
        """
        Constructor
        
        Arguments:
             - project_path: absolute project path
            (- config_file: generated by config_MULH.py)
            (- tmp_path: temporary folder relative path)
            (- output_path: relative results path)
        """
        
        self.project_path = project_path                
        if not os.path.exists(project_path):
            raise OSError('Incorrect project directory absolute path')
        
        self.config_file = config_file
        if not os.path.isfile(os.path.join(project_path, config_file)):
            print(os.path.join(project_path, config_file))
            raise OSError('Incorrect relative config filename')

        
        self.tmp_path = tmp_path 
        if not os.path.exists(os.path.join(project_path, tmp_path)):
            raise OSError('Invalid temporary directory relative path')
        
        self.output_path = output_path 
        if not os.path.exists(os.path.join(project_path, output_path)):
            raise OSError('Invalid output directory relative path')
            
            
        
    def set_config_parameters(self, project_path, output_path = 'results/'):
        """
        Set config.mulh
        
        Argument:
             - project_path: where config.mulh should be stored
            (- output_path: where datas should be stored
            
        Returns:
             - config.mulh: a config file in project_path
             - a text file containing all results in output_path
        """
        #****************************************************************************************************************************
        # 			USER INPUTS
        #
        #
        # Analysis type (atype)
        # 0 = single run at a user specified power, not a power sweep. Can create a video by changing psave
        # 1 = single power sweep
        # 2 = varying length analysis. Requires same inputs as 1 but also to specify lower and upper lw (in multiples of 10)
        # 3 = convergence study. Specify lower and upper NOC_lambda.
        # 4 = sensitivity to toroidal magnetic field (Bx)
        # 5 = sensitivity to poloidal magnetic field (By)
        # 6 = sensitivity to radial magnetic field (Bz)
        # 7 = threshold for different machines using different materials at different frequencies
        # 8 = single sweep w/ controlled stochasticity. Provide px2, pv2, pphases and a stock of random deviates (need enough of them)
        # 9 = single sweep w/ controlled stochasticity. Provide px2, pv2, pphases, srand, drand, irand, secrand
        # 10 = time convergence study. Specify lower and upper CLfactor will be 0.99.
        # 11 = sensitivity to a_lara unknown factor that has to be between 7e-3 and 10e-3
        # 12 = stochastic oscillation of results
        # 
        # NOTE = 2-7, 10, 11 and 12 can take a very long time so it is recommended to run them remotely (in a server)
        
        atype = 1
        #==============================================================================
        # ######### Geometry #########
        #==============================================================================
        b = 70      # Height of the waveguide in mm
        a = 8       # Width of the waveguide in mm
        lw = 80    # Depth/Length of the waveguide in mm. If changed make sure there are still enough cells per wavelength
        lwu = 160   # Upper waveguide length (if atype==2)
        
        NOC_lambda = 20     # Number of Cells per wavelength
        NOC_lambdau = 50    # Upper number of Cells per wavelength (for atype==3)
        CLfactor = 0.95     # Factor to make sure Courant-Levy condition is obeyed. Decrease CLfactor for smaller time step
        Prec = 0.1          # Threshold precision (dB)
        
        #==============================================================================
        # ######### Input Wave/Field solver #########
        #==============================================================================
        f_I = 3.7e9     # Frequency of input wave in Hz
        Pl0 = 3.0e4     # Lower power limit (watts)
        Pu0 = 4.0e4    # Upper power limit (watts)
        
        fields = 1      # Field solver. =1 FDTD, =2 analytic TE10 mode, =3 exported from other solver(need NOC_PML=1 w/ fields=3)
        ramp = 1        # Increase fields slowly over ramp periods, integer
        NOC_PML = 1     # Number Of Cells in PML, integer
        R_max = 1e-10   # Reflection error for normally incident wave (as a fraction)
        m_PML = 3       # PML grading order, integer
        
        #==============================================================================
        # ########## Static DC magnetic field (poloidal + toroidal). Gauss format, e.g. 2/10000. Minimum field allowed = 1G#########
        #==============================================================================
        sBx = 0.        # Toroidal magnetic field at plasma center (T)
        sBxu = 0.       # Upper toroidal magnetic field at plasma center (T) (for atype==4)
        sBy = 0.        # Poloidal magnetic field in waveguide (T)
        sByu = 0.       # Upper poloidal magnetic field in waveguide (T)
        sBz = 0.        # Radial magnetic field in waveguide (T)
        sBzu = 0.       # Upper radial magnetic field in waveguide (T)
        
        #==============================================================================
        # ########## Particles #########
        #==============================================================================
        Np = 100        # Number of primary particles (has to be even, preferably multiples of 16)
        vth = 5         # Initial energy of seed electrons (eV), integer
        vra = np.sqrt(2.)  # Ratio of vth_perpendicular to vth_parallel (sqrt(2) for isotropic)
        px_i = 3        # Position of seed e 1=Side walls 2=4 planes parallel to side walls 3= Randomly scattered in centered region
        fmax = 4        # vth*fMax is the largest velocity represented for the sample array fSample
        nsamplev = 250  # # of sample fraction values for creating a Maxwellian velocity distribution function
        launch = 3      # Launch method 1=each at a different phase [0,360] 2=range of phases every 5 or 10 degrees [0,360] 3=random
        
        #==============================================================================
        # ########## Particle-Wall interaction #########
        #==============================================================================
        seec = 1        # SEE model, =1 Modified Vaughan, =2 Furman & Pivi, =3 Cheng w/ de Lara Re/Rr, =4 FEST3Dish?
        ReRr = 1        # Contributions from elastically (Re) and rediffused (Rr) electrons. =1 de Lara, =2 CERN LHC report
        E1 = 35         # First crossover
        Emax = 165      # Emax(delta=max,theta=0) in eV
        delta_b = 0.5   # Yield below E_0
        deltamax = 2.3  # Maximum secondary electron yield (at Emax) for normal incidence (theta=0)
        p_n = 1         # p_n phenomelogical parameter in Furman & Pivi, ==2 in Cheng
        kse = 1         # Energy Roughness factor, [0,2], 0=rough,2=smooth
        ks = 1          # Angle Roughness factor, [0,2], 0=rough,2=smooth
        Eom = 1         # Av energy of Maxwellian distribution of secondary electrons emitted (eV)
        Ns = 4          # Number of secondary electrons simulated (in multiples of Np)
        a_lara = 7.5e-3 # Material dependent coeff for elastic contribution in de Lara's paper
        z_lara = 29     # Atomic number of coating material in Lara's fit
        mat = 'copper'  # Material
        
        #==============================================================================
        # ########## Save outputs ##########
        #==============================================================================
        psave = 0	# Save particle position and velocity every psave iteration, =0 for not saving
        project_ID = str(time.localtime()[0]) + str(time.localtime()[1]) + str(time.localtime()[2]) + '_' + str(time.localtime()[3]) + 'h' + str(time.localtime()[4]) + 'm' + str(time.localtime()[5]) + 's.txt'
        if not(os.path.exists(project_path + output_path + project_ID)):
            sub.call(['touch',project_path + output_path + project_ID])
        self.results_file = os.path.join(project_path, output_path, project_ID)
        #==============================================================================
        # -------------------------END OF USER INPUTS----------------------------------
        #==============================================================================
        
        
        #==============================================================================
        # Store datas in config.mulh
        #==============================================================================
        if not(os.path.exists(project_path + 'tempconfig/')):
            os.mkdir(project_path + 'tempconfig/')
        np.savetxt(project_path + 'tempconfig/temp1_config.txt', (atype,b,a,lw,lwu,NOC_lambda,NOC_lambdau), fmt = '%i')
        np.savetxt(project_path + 'tempconfig/temp2_config.txt',(CLfactor,Prec), fmt= '%f')
        np.savetxt(project_path + 'tempconfig/temp3_config.txt', [f_I], fmt = '%e')
        np.savetxt(project_path + 'tempconfig/temp4_config.txt',(Pl0, Pu0, fields, ramp, NOC_PML), fmt= '%i')
        np.savetxt(project_path + 'tempconfig/temp5_config.txt',[R_max], fmt= '%.15f')
        np.savetxt(project_path + 'tempconfig/temp6_config.txt', [m_PML], fmt = '%i')
        np.savetxt(project_path + 'tempconfig/temp7_config.txt',(sBx, sBxu, sBy, sByu, sBz, sBzu), fmt= '%.15f')
        np.savetxt(project_path + 'tempconfig/temp8_config.txt',(Np, vth), fmt= '%i')
        np.savetxt(project_path + 'tempconfig/temp9_config.txt',[vra], fmt= '%.15f')
        np.savetxt(project_path + 'tempconfig/temp10_config.txt',(px_i, fmax, nsamplev, launch, seec, ReRr, E1, Emax), fmt= '%i')
        np.savetxt(project_path + 'tempconfig/temp11_config.txt',(delta_b, deltamax), fmt= '%.15f')
        np.savetxt(project_path + 'tempconfig/temp12_config.txt',(p_n, kse, ks, Eom, Ns), fmt= '%i')
        np.savetxt(project_path + 'tempconfig/temp13_config.txt',[a_lara], fmt= '%.15f')
        np.savetxt(project_path + 'tempconfig/temp14_config.txt',[z_lara], fmt= '%i')
        np.savetxt(project_path + 'tempconfig/temp15_config.txt',[mat], fmt= '%s', )
        np.savetxt(project_path + 'tempconfig/temp16_config.txt',[psave], fmt= '%i')
        np.savetxt(project_path + 'tempconfig/temp17_config.txt',["'" + output_path + project_ID + "'"], fmt= '%s')
        outfile = open(project_path + 'config.mulh', 'w')
        for i in range(1,18):
            temp = open(project_path + 'tempconfig/temp' + str(i) + '_config.txt')
            outfile.write(temp.read())
            temp.close()
        outfile.close()
        shutil.rmtree(project_path + 'tempconfig')
        printc(  '\n' + '_____________________________________' 
                  + '\n' + '        config.mulh created!         '
                  + '\n' + '_____________________________________'
                  + '\n',color='blue')
    
        
        
    def fortran_compile(self):
        """
        Compile the code with the 'make' command.
        
        Arguments:
            None
            
        Returns:
            Compilation status message
        """
        cmd_compile = 'cd && cd ' + self.MULH_PATH + ' && make'
        try:
            sub.call(cmd_compile, shell=True)
            printc(  '\n' + '_____________________________________' 
                  + '\n' + '        Compilation complete!        '
                  + '\n' + '_____________________________________'
                  + '\n',color='blue')

        except sub.CalledProcessError as e:
            printc(  '\n' + '_____________________________________' 
                  + '\n' + '         Compilation failed!         '
                  + '\n' + '             Error ' + e
                  + '\n' + '_____________________________________'
                  + '\n',color='magenta')
      
        
        
    def run(self):
        """
        Run the MULH modeling.
        
        Arguments:
            None
            
        Returns:
            None
        """
        try:
            env = os.environ
            print(self._get_run_command() + '\n')
            with sub.Popen(self._get_run_command(), shell=True, env=env, 
                       stdout=sub.PIPE, stderr=sub.PIPE, universal_newlines=True) as p:
                for lines in p.stdout:
                    print(lines, end=' ')
                print(p.returncode)
        except OSError as e:
            printc('Error ! ' + e, color='magenta')
        
        
    
    def _get_run_command(self):
        """
        Define bash command that will run the MULH code
        """
        cmd = 'cd && cd ' + self.BIN_PATH + ' && ./MULH'
        return(cmd)
   
        
        
    def get_results(self):
        """
        Returns MULH run results
        
        Arguments:
            MULH_output: where MULH stores its results
        
        Returns:
            freq: array of frequency
            power: array of breakdown power
        """
        power, sBx, sBy, sBz = None, None, None, None
        if os.path.isfile(self.results_file):
            power, sBx, sBy, sBz = np.loadtxt(self.results_file, 
                               skiprows=0, 
                               unpack=True)
        self.power = power
        self.sBx = sBx
        self.sBy = sBy
        self.sBz = sBz
        return power, sBx, sBy, sBz
        
               
        
if __name__ == "__main__":  
    # Absolute path of the project
    project_path = '/Home/AP252436/Work_MULH/'
    # Relative path to the .mulh file     
    config_file = 'config.mulh'
    # Run the MULH Simulation    
    mulh = MULHcl(project_path, config_file = config_file)
    mulh.set_config_parameters(project_path)
    mulh.fortran_compile()
    mulh.run()
    power, sBx, sBy, sBz = mulh.get_results()
    printc('Breakdown power : ' + str(power) + 'W'
           + '\n' + 'Toroidal magnetic field : ' + str(sBx) + 'T'
           + '\n' + 'Poloidal magnetic field : ' + str(sBy) + 'T'
           + '\n' + 'Radial magnetic field : ' + str(sBz) + 'T', color='c')
    
    # Appending the results to a text file
    with open('RESULTS.txt','ba') as f_handle:
        np.savetxt(f_handle, [power, sBx, sBy, sBz])
        
        
        
        
        
        
        
        