##/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 15 11:03:24 2017

@author: AP252436
"""

import numpy as np
import os as os
#import shutil
#from subprocess import call



#==============================================================================
# Compile and run MULH
#==============================================================================
#os.system('make && cd bin/ && ./MULH')



class MULHcl:
    """
    MULH simulation object.
    
    IMPORTANT :
        A config.mulh file should be present in the MULH/ directory.
        It can easily be configured thanks to config_MULH.py.
    
        Results will be stored in the MULH/data/results_python folder.
        """
    MULH_PATH = '/Home/AP252436/MULH/'
    BIN_PATH = MULH_PATH + 'bin/'

    if not os.path.exists(MULH_PATH):
        raise OSError('Incorrect MULH folder absolute path')  
    if not os.path.exists(BIN_PATH):
        raise OSError('Incorrect bin relative path -- check that there is a bin directory in the MULH folder')




    def __init__(self, project_path, config_file='config.mulh', tmp_path = 'tmp/', output_path = 'results/'):
        """
        Constructor
        
        Arguments:
             - project_path: absolute project path
            (- config_file: generated by config_MULH.py)
            (- tmp_path: temporary folder relative path)
            (- output_path: relative results path)
        
        """
        
        self.project_path = project_path                
        if not os.path.exists(project_path):
            raise OSError('Incorrect project directory absolute path')
        
        self.config_file = config_file
        if not os.path.isfile(os.path.join(project_path, config_file)):
            print(os.path.join(project_path, config_file))
            raise OSError('Incorrect relative config filename')
        
        self.tmp_path = tmp_path 
        if not os.path.exists(os.path.join(project_path, tmp_path)):
            raise OSError('Invalid temporary directory relative path')
        
        self.output_path = output_path 
        if not os.path.exists(os.path.join(project_path, output_path)):
            raise OSError('Invalid output directory relative path')
            
        # Default results file:
        self.results_file = os.path.join(project_path, output_path, 'general_results.txt')
        


      
    def run(self):
        """
        Run the MULH modeling.
        """
        
        
        
    
    def _get_run_command(self):
        """
        ???
        """
        
        
        
        
    def get_results(self):
        """
        Returns MULH run results
        
        Arguments:
            None
        
        Returns:
            freq: array of frequency
            power: array of breakdown power
        """
        
        
        
      
    def get_full_results(self):
        """
        Returns MULH run results
        
        Arguments:
            None
        
        Returns:
            Not determined yet
        """
    
    
    
    
    def set_config_parameters(self, param, value):
        """
        Set config.mulh
        ??? : keep config_MULH.py or use this class ???
        """
    
    
    
    
    def get_config_parameters(self, param):
        """
        Get parameters
        ??? : useful in this case ? MULHs.f90 calls his parameters himself...
        """
      
        
        
        
if __name__ == "__main__":  
    # Absolute path of the project
    project_path = '/Home/AP252436/Work_MULH/'
    # Relative path to the .mulh file     
    config_file = 'config.mulh'
    # Run the MULH Simulation    
    mulh = MULHcl(project_path, config_file = config_file)
    mulh.run()
    freq, power = mulh.get_results()
    print(freq, power)
    
    # Appending the results to a text file
    with open('RESULTS.txt','ba') as f_handle:
        np.savetxt(f_handle, [power])
        
        
        
        
        
        
        
        